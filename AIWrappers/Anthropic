//Make API request to Claude and get JSON response 
import Foundation

enum APIError: Error {
    case invalidURL
    case networkError(Error)
    case invalidResponse
    case decodingError(Error)
    case apiError(String)
}

actor APIClient {
    static let shared = APIClient()
    
    private init() {}
    
    func sendPrompt(_ prompt: String) async throws -> String {
        guard let url = URL(string: Constants.apiURL) else {
            throw APIError.invalidURL
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        request.addValue("Bearer \(Constants.apiKey)", forHTTPHeaderField: "Authorization")
        
        let body: [String: Any] = [
            "model": "claude-3-sonnet-20240229",
            "messages": [
                ["role": "user", "content": prompt]
            ],
            "max_tokens": 1000
        ]
        
        request.httpBody = try JSONSerialization.data(withJSONObject: body)
        
        do {
                    let (data, _) = try await URLSession.shared.data(for: request)
                    
                    if let jsonString = String(data: data, encoding: .utf8) {
                        print("Raw JSON response: \(jsonString)")
                    }
                    
                    // First, try to decode as an error response
                    if let errorResponse = try? JSONDecoder().decode(APIErrorResponse.self, from: data) {
                        throw APIError.apiError(errorResponse.error.message)
                    }
                    
                    // If it's not an error, try to decode as the successful response
                    let response = try JSONDecoder().decode(APIResponse.self, from: data)
                    print(response)
                    return response.choices.first?.message.content ?? "No response"
                } catch {
                    print("Error in sendPrompt method: \(error)")
                    throw APIError.networkError(error)
                }
    }
}

struct APIResponse: Codable {
    let choices: [Choice]
}

struct Choice: Codable {
    let message: Message
}

struct Message: Codable {
    let content: String
}

struct APIErrorResponse: Codable {
    let type: String
    let error: APIErrorDetail
}

struct APIErrorDetail: Codable {
    let type: String
    let message: String
}
